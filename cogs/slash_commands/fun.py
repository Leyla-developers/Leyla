from asyncio import sleep
from io import BytesIO
from typing import Literal
from random import randint, choices
from string import punctuation
from typing import Literal
from threading import Thread

import disnake
from disnake.ext import commands
import blurplefier

from Tools.exceptions import CustomError
from Tools.images import ship_image
from services import waifu_pics

OVERLAY_DESCRIPTIONS = {
    'jail': '`{0}` –ó–∞ —à–æ —Å–∏–¥–∏–º?',
    'wasted': 'R.I.P. `{0}` –ø–æ–≥–∏–±(-–ª–∞) —Å–º–µ—Ä—Ç—å—é —Ö—Ä–∞–±—Ä—ã—Ö :D',
    'gay': 'ü§≠',
    'triggered': '–í–´–ê–´–í–û–ê–´–ê–û–´–í–ê–´–í–ê–†–´–†–ê–í–´–†–ê–õ–û'
}


class FunSlashCommands(commands.Cog, name="—Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", description="–í—Å—è–∫–∏–µ —Ç–∞–º —Ä–∞–∑–≤–ª–µ–∫–∞—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã, –¥–∞."):

    COG_EMOJI = "‚öΩ"

    def __init__(self, bot) -> None:
        self.bot = bot


    def word_game_validator(self, message: disnake.Message, author: disnake.Member):
        check = lambda x: ''.join([i for i in x if i not in ' '.join(punctuation).split()])
        return check(message.replace('—ä', '').replace('—å', '').replace(' ', '')), author


    @commands.slash_command(description="–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç a –¥–æ b")
    async def random(self, inter: disnake.ApplicationCommandInteraction, a: int = commands.Param(description="–ü–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ"), b: int = commands.Param(description="–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ")):
        if b < a or a == b:
            raise CustomError('–í—Ç–æ—Ä–æ–µ —á–∏—Å–ª–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –ø–µ—Ä–≤–æ–º—É –ª–∏–±–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ —á–µ–º –æ–Ω–æ owo')

        await inter.send(f'–í—ã–ø–∞–≤—à–µ–µ —á–∏—Å–ª–æ: {randint(a, b)}')

    @commands.slash_command(
        options=[
            disnake.Option(
                'overlay', '–≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ', 
                type=disnake.OptionType.string,
                required=True, 
                choices=['wasted', 'jail', 'comrade', 'gay', 'glass', 'passed', 'triggered', 'blurple']
            ),
            disnake.Option('user', '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', type=disnake.OptionType.user, required=False)
        ],
        name='avatar-overlay',
        description="–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã –Ω–∞ –∞–≤–∞—Ç–∞—Ä."
    )
    async def overlay_image(self, inter: disnake.ApplicationCommandInteraction, overlay: str, user: disnake.User = commands.Param(lambda inter: inter.author)):
        if overlay == 'blurple':
            input_bytes = await user.display_avatar.read()
            extension, blurplefied_bytes = blurplefier.convert_image(
                input_bytes, blurplefier.Methods.CLASSIC
            )
            avatar_bytes = BytesIO(blurplefied_bytes)

            await inter.send(file=disnake.File(avatar_bytes, filename=f'blurplefied_file.{extension}'))
        else:
            async with inter.bot.session.get(f'https://some-random-api.ml/canvas/{overlay}?avatar={user.display_avatar.url.replace("gif", "png")}') as response:
                data = await response.read()
                image_bytes = BytesIO(data)
                image_filename = f'overlay.{"png" if overlay != "triggered" else "gif"}'
                embed = await inter.bot.embeds.simple(title=OVERLAY_DESCRIPTIONS.get(overlay).format(user) if overlay in OVERLAY_DESCRIPTIONS else disnake.embeds.EmptyEmbed, image=f'attachment://{image_filename}')
                await inter.send(embed=embed, file=disnake.File(image_bytes, filename=image_filename))

    @commands.slash_command(
        options=[
            disnake.Option(
                'choice', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–≤–ê—Ç–¨–∫—É owo', 
                type=disnake.OptionType.string,
                required=True, 
                choices=['megumin', 'shinobu', 'awoo', 'neko', 'poke']
            )
        ],
        name='anime-girl',
        description="–ê–Ω–∏–º–µ —Ç—è–Ω–∫–∏"
    )
    async def anime_girl(self, inter: disnake.ApplicationCommandInteraction, choice: str):
        embed = await inter.bot.embeds.simple(title=f'{choice.title()} OwO', image=await waifu_pics.get_image('sfw', choice.lower()))
        return await inter.send(embed=embed)

    @commands.slash_command(name="ship", description="–°–æ–∑–¥–∞–Ω–∏–µ —à–∏–ø-–∫–∞—Ä—Ç–∏–Ω–∫–∏")
    async def ship_not_ship(
        self, 
        inter, 
        user_one: disnake.User,
        second_user: disnake.User
    ):
        await inter.response.defer()
        percentage = randint(1, 100)
        get_image = ship_image(percentage, user_one, second_user)
        file = disnake.File(get_image.image_bytes, 'ship_img.png')

        await inter.send(
            embed=await inter.bot.embeds.simple(
                title=f'*–¢–æ–ª–∫–Ω—É–ª–∞ {user_one.name} –Ω–∞ {second_user.name}* <:awww:878155710796550145>' if percentage > 30 else '–•—Ä—É—Å—å üíî',
                image='attachment://ship_img.png'
            ), file=file
        )

    @commands.slash_command(
        name="russian-roulette",
        description="–ú–æ–π —Ö–æ–∑—è–∏–Ω –Ω–∞—É—á–∏–ª –º–µ–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ä–µ–≤–æ–ª—å–≤–µ—Ä–æ–º"
    )
    async def fun_russian_roulette(self, inter, join_or_start_game: Literal['–ù–∞—á–∞—Ç—å', '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è']):
        user_choice = {
            '–ù–∞—á–∞—Ç—å': 1,
            '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è': 2
        }
        db = inter.bot.config.DB.russian_roulette

        if user_choice[join_or_start_game] == 1:
            if await db.count_documents({"_id": inter.guild.id, "status": 0}) == 0: # "status": 0 = –Ω–∞–±–æ—Ä –∏–≥—Ä–æ–∫–æ–≤, –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å. "status": 1 = –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
                await db.insert_one({"_id": inter.guild.id, "status": 0, "users": [], "queue": [inter.author.id], "host": inter.author.id})
                await inter.send(
                    embed=await inter.bot.embeds.simple(
                        title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞',
                        description="–ù–æ–≤–∞—è –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞! –ñ–¥—ë–º –ª—é–¥–µ–π. –ï—Å—Ç—å –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –±—É–¥–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ - –∏–≥—Ä–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞"
                    )
                )
                await sleep(60)

                data = await db.find_one({"_id": inter.guild.id})

                if len(data['users']) > 0:
                    await inter.send(f'–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! {inter.author.mention} –≤–∞—à —Ö–æ–¥! (–ò–≥—Ä–∞ –±—É–¥–µ—Ç –¥–ª–∏—Ç—å—Å—è 600 —Å–µ–∫—É–Ω–¥ (10 –º–∏–Ω—É—Ç))\n–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ `–≤—ã—Å—Ç—Ä–µ–ª`, —á—Ç–æ–± —Å–¥–µ–ª–∞—Ç—å —Ö–æ–¥.')
                    await sleep(600)
                    await db.delete_one({"_id": inter.guild.id})
                else:
                    await inter.send("–ò–≥—Ä–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                    await db.delete_one({"_id": inter.guild.id})
            else:
                game_status = await db.find_one({"_id": inter.author.id})

                if game_status['status'] == 0:
                    await inter.send(
                        embed=await inter.bot.embeds.simple(
                            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞', 
                            description="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –ª–æ–±–±–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –Ω–µ–º—É!"
                        )
                    )
                else:
                    await inter.send(
                        embed=await inter.bot.embeds.simple(
                            title='–†—É—Å—Å–∫–∞—è —Ä—É–ª–µ—Ç–∫–∞', 
                            description="–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —É–∂–µ –µ—Å—Ç—å –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ –ª–æ–±–±–∏, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã!"
                        )
                    )
        else:
            if await db.count_documents({"_id": inter.guild.id, "status": 0}) == 0:
                await inter.send('–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö –ª–æ–±–±–∏, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ!')
            else:
                data = await db.find_one({"_id": inter.guild.id})

                if data['host'] == inter.author.id:
                    await inter.send("–í—ã - —Ö–æ—Å—Ç–µ—Ä –∏–≥—Ä—ã. –ü—Ä–æ—Å—Ç–æ –æ–∂–∏–¥–∞–π—Ç–µ —á—å–µ–≥–æ-–Ω–∏–±—É–¥—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
                else:
                    await inter.send("–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –í—ã –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –∏–≥—Ä—É, –æ–∂–∏–¥–∞–π—Ç–µ.")
                    await db.update_one({"_id": inter.guild.id}, {"$push": {"users": inter.author.id}})

    @commands.slash_command(
        name="rps",
        description="–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –¥–ª—è –º–Ω–æ–≥–∏—Ö –∏–≥—Ä–∞: –∫–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞",
    )
    async def fun_rps(self, inter, user_choice: Literal['–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞']):
        variants = {'–Ω–æ–∂–Ω–∏—Ü—ã': '–±—É–º–∞–≥–∞', '–∫–∞–º–µ–Ω—å': '–Ω–æ–∂–Ω–∏—Ü—ã', '–±—É–º–∞–≥–∞': '–∫–∞–º–µ–Ω—å'}
        bot_choice = ''.join(choices(list(variants.keys()), weights=[50, 30, 35], k=1))

        if user_choice == variants[bot_choice]:
            await inter.send(f'–Ø –ø–æ–±–µ–¥–∏–ª–∞ u-u! –ú–æ–π –≤—ã–±–æ—Ä –±—ã–ª: `{bot_choice}`')
        else:
            await inter.send(f'–¢—ã –ø–æ–±–µ–¥–∏–ª(-–∞) (. –ú–æ–π –≤—ã–±–æ—Ä –±—ã–ª: `{bot_choice}`' if bot_choice != user_choice else f'–ù–∏—á—å—è, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ–¥–∏–ª üòÖ\n ||{user_choice} - {bot_choice}||')

    @commands.Cog.listener('on_message')
    async def russian_roulette_event(self, message):
        db = self.bot.config.DB.russian_roulette

        if await db.count_documents({"_id": message.guild.id}) == 0:
            return

        data = await db.find_one({"_id": message.guild.id})
        n = randint(1, 2) # 1 - –≤—ã–∂–∏–ª, 2 - –Ω–µ—Ç

        if message.author.id in data['users'] or message.author.id in data['queue']:
            if data['queue'][0] == message.author.id:
                if message.content.lower() == "–≤—ã—Å—Ç—Ä–µ–ª":
                    get_last_user_id = data['users'][-1]
                    if n == 1:
                        await message.channel.send(f'{message.author.mention} —Ç–µ–±–µ –ø–æ–≤–µ–∑–ª–æ. –°–ª–µ–¥—É—é—â–∏–π! {message.guild.get_member(get_last_user_id).mention}')
                        await db.update_one({"_id": message.guild.id}, {"$pull": {'queue': message.author.id}})
                        await db.update_one({"_id": message.guild.id}, {"$push": {'queue': get_last_user_id}})
                        await db.update_one({"_id": message.guild.id}, {"$pull": {'users': get_last_user_id}})
                        await db.update_one({"_id": message.guild.id}, {"$push": {'users': message.author.id}})
                    else:
                        await db.update_one({"_id": message.guild.id}, {"$pull": {'queue': message.author.id}})
                        await db.update_one({"_id": message.guild.id}, {"$push": {'queue': get_last_user_id}})
                        await db.update_one({"_id": message.guild.id}, {"$pull": {'users': get_last_user_id}})

                        updated_data = await db.find_one({"_id": message.guild.id})

                        if len(updated_data['users']) + len(updated_data['queue']) == 1:
                            await message.channel.send(f'–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: {message.guild.get_member(updated_data["queue"][0]).mention}')
                            await db.delete_one({"_id": message.guild.id})
                        else:
                            await message.channel.send(f'–ó–∞—Å—Ç—Ä–µ–ª–∏–ª—Å—è(-–∞—Å—å) {message.author.mention}. –ü–æ–º—è–Ω–µ–º. –°–ª–µ–¥—É—é—â–∏–π! {message.guild.get_member(get_last_user_id).mention}')

    @commands.Cog.listener('on_message')
    async def word_game_event(self, message):
        db = self.bot.config.DB.word_game

        if await db.count_documents({"_id": message.guild.id}) == 0:
            return

        data = db.find_one({'_id': message.guild.id})

        if message.channel.id == dict(await data)['channel']:
            if len([i async for i in message.channel.history()]) == 0:
                return
            
            if len([i async for i in message.channel.history()]) == 1:
                return
            
            last_message = [i async for i in message.channel.history()][1]
            msg = self.word_game_validator(last_message.content, last_message.author)

            if len(message.attachments) > 0:
                Thread(target=await message.delete()).run()

            if message.content[0].lower() != msg[0][-1].lower() or message.author.id == msg[-1].id:
                Thread(target=await message.delete()).run()


def setup(bot):
    bot.add_cog(FunSlashCommands(bot))
