import re
import json
import random
import typing
import asyncio
import calendar as cld
from io import BytesIO
from os import environ
from typing import Literal
from bs4 import BeautifulSoup
from urllib.parse import quote
from datetime import datetime, timedelta

import aiohttp
from PIL import Image
from textwrap3 import wrap
from humanize import naturaldelta

import disnake
import wikipedia
import emoji as emj
from bs4 import BeautifulSoup
from disnake.ext import commands
from disnake import SelectOption
from google.translator import GoogleTranslator

from Tools.decoders import Decoder
from Tools.paginator import Paginator
from Tools.links import emoji_converter
from Tools.exceptions import CustomError
from Tools.buttons import CurrencyButton
from Tools.update_changer import updated_username


class WikiDropdown(disnake.ui.Select):
    def __init__(self, author: disnake.Member, wiki_options: list):
        self.author = author

        options = wiki_options
        super().__init__(
            placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—å—é",
            min_values=1,
            max_values=1,
            options=options,
            custom_id="wiki_dropdown"
        )

    async def callback(self, inter):
        await inter.response.defer()

        if inter.author.id == self.author.id:
            data = wikipedia.page(title=wikipedia.search(self.values[0])[0])
            embeds = [await inter.bot.embeds.simple(title=data.title, url=data.url, description=i) for i in wrap(data.content, 1998)]
            await inter.edit_original_message(embed=embeds[0], view=Paginator(pages=embeds, author=inter.author))
        else:
            await inter.send('–ù–µ —Ç—ã –≤—ã–∑—ã–≤–∞–ª –∫–æ–º–∞–Ω–¥—É!', ephemeral=True)


class Utilities(commands.Cog, name="—Å–ª—ç—à-—É—Ç–∏–ª–∏—Ç—ã", description="–í—Ä–æ–¥–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª–µ–∑–Ω—ã, —Ö–¥."):

    COG_EMOJI = "üîß"

    @commands.slash_command(
        description="–í—ã–≤–æ–¥ –∞–≤–∞—Ç–∞—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞"
    )
    async def avatar(self, inter, user: disnake.User = commands.Param(lambda inter: inter.author)):
        formats = [
            f"[PNG]({user.display_avatar.replace(format='png', size=1024).url}) | ",
            f"[JPG]({user.display_avatar.replace(format='jpg', size=1024).url})",
            f" | [GIF]({user.display_avatar.replace(format='gif', size=1024).url})" if user.display_avatar.is_animated() else ""
        ]
        embed = await inter.bot.embeds.simple(
            title=f"–ê–≤–∞—Ç–∞—Ä {'–±–æ—Ç–∞' if user.bot else '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'} {user.name}",
            description=''.join(formats),
            image=user.display_avatar.url
        )
        await inter.send(embed=embed)

    @commands.slash_command(
        description='–ü–µ—Ä–µ–≤–æ–¥ –≤/–∏–∑ –∞–∑–±—É–∫–∏ –º–æ—Ä–∑–µ.'
    )
    async def crypter(self, inter, decoder: typing.Literal['–ú–æ—Ä–∑–µ', '–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è'],
                      variant: typing.Literal['crypt', 'decrypt'], text):
        if decoder == "–ú–æ—Ä–∑–µ":            
            if variant == 'crypt':
                morse = Decoder().to_morse(text)
            elif variant == 'decrypt':
                morse = Decoder().from_morse(text)

            embed = await inter.bot.embeds.simple(
                title='Decoder/Encoder –º–æ—Ä–∑–µ.',
                description=morse
            )

        elif decoder == "–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è":
            if variant == 'crypt':
                cezar = ''.join([chr(ord(i) + 3) for i in text])

            elif variant == 'decrypt':
                cezar = ''.join([chr(ord(i) - 3) for i in text])

            embed = await inter.bot.embeds.simple(
                title='Decoder/Encoder —à–∏—Ñ—Ä–∞ –¶–µ–∑–∞—Ä—è (3).',
                description=' '.join([i for i in cezar.split()])
            )

        await inter.send(embed=embed)

    @commands.slash_command(
        description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥–∏–ª—å–¥–∏–∏",
    )
    async def guild(self, inter: disnake.ApplicationCommandInteraction, guild: disnake.Guild = commands.Param(lambda inter: inter.guild)):
        channel_ids = sorted(list(i.id for i in guild.channels if not isinstance(i, disnake.CategoryChannel)))
        role_ids = sorted(list(i.id for i in guild.roles if i.id != guild.default_role.id and not i.is_integration()))
        member_ids = sorted(list(i.id for i in guild.members if not i.bot))
        last_joined = list(i.mention + ' | ' + f'<t:{round(i.joined_at.timestamp())}:R>' for i in guild.members if i.joined_at == sorted(list(map(lambda x: x.joined_at, list(filter(lambda x: x.id != guild.owner_id, guild.members)))))[-1])
        first_joined = list(i.mention + ' | ' + f'<t:{round(i.joined_at.timestamp())}:R>' for i in guild.members if i.joined_at == sorted(list(map(lambda x: x.joined_at, list(filter(lambda x: x.id != guild.owner_id, guild.members)))))[0]) # –ö–æ–ª–±–∞—Å–∫–∏ ^--------------^

        members = (
            f'–ë–æ—Ç–æ–≤: **{len(list(i.id for i in guild.members if i.bot))}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–Ω–µ —Å—á–∏—Ç–∞—è –±–æ—Ç–æ–≤): **{len(list(i.id for i in guild.members if not i.bot))}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:leyla_online:980318029764251679> (—Å—á–∏—Ç–∞—è –±–æ—Ç–æ–≤): **{len(list(filter(lambda x: x.status == disnake.Status.online, guild.members)))}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:leyla_dnd:980318029860704317>: **{len(list(filter(lambda x: x.status == disnake.Status.dnd, guild.members)))}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:leyla_idle:980318419859685457>: **{len(list(filter(lambda x: x.status == disnake.Status.idle, guild.members)))}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ <:leyla_offline:980318029877502003>: **{len(list(filter(lambda x: x.status == disnake.Status.offline, guild.members)))}**',
        )
        dates = (
            f'–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞: <t:{round(guild.created_at.timestamp())}:R>',
            f'–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π –∫–∞–Ω–∞–ª: {guild.get_channel(channel_ids[0]).mention} | <t:{round(guild.get_channel(channel_ids[0]).created_at.timestamp())}:R>',
            f'–°–∞–º—ã–π –º–æ–ª–æ–¥–æ–π –∫–∞–Ω–∞–ª: {guild.get_channel(channel_ids[-1]).mention} | <t:{round(guild.get_channel(channel_ids[-1]).created_at.timestamp())}:R>',
            f'–°–∞–º–∞—è —Å—Ç–∞—Ä–∞—è —Ä–æ–ª—å: {guild.get_role(role_ids[0]).mention} | <t:{round(guild.get_role(role_ids[0]).created_at.timestamp())}:R>',
            f'–°–∞–º–∞—è –º–æ–ª–æ–¥–∞—è —Ä–æ–ª—å: {guild.get_role(role_ids[-1]).mention} | <t:{round(guild.get_role(role_ids[-1]).created_at.timestamp())}:R>',
            f'–°–∞–º—ã–π —Å—Ç–∞—Ä—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {guild.get_member(member_ids[0]).mention} | <t:{round(guild.get_member(member_ids[0]).created_at.timestamp())}:R>',
            f'–°–∞–º—ã–π –º–æ–ª–æ–¥–æ–π —É—á–∞—Å—Ç–Ω–∏–∫: {guild.get_member(member_ids[-1]).mention} | <t:{round(guild.get_member(member_ids[-1]).created_at.timestamp())}:R>',
            f'–ü–µ—Ä–≤—ã–π –∑–∞—à–µ–¥—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: {"".join(first_joined)}',
            f'–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞—à–µ–¥—à–∏–π —É—á–∞—Å—Ç–Ω–∏–∫: {"".join(last_joined)}'
        )
        boosts = (
            f'–í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É—Å—Ç–æ–≤: **{"–î–∞" if guild.premium_progress_bar_enabled else "–ù–µ—Ç"}**',
            f'–ë—É—Å—Ç–µ—Ä–æ–≤: **{len(guild.premium_subscribers)}**',
            f'–£—Ä–æ–≤–µ–Ω—å –±—É—Å—Ç–∞: **{guild.premium_tier}**'
        )
        channels = (
            f'–í—Å–µ–≥–æ –∫–∞–Ω–∞–ª–æ–≤: **{len(guild.channels)}**',
            f'–ì–æ–ª–æ—Å–æ–≤—ã—Ö: **{len(guild.voice_channels)}**',
            f'–¢–µ–∫—Å—Ç–æ–≤—ã—Ö: **{len(guild.text_channels)}**',
            f'–í–µ—Ç–æ–∫: **{len(guild.threads)}**',
            f'–ö–∞–Ω–∞–ª –ø—Ä–∞–≤–∏–ª: {guild.rules_channel.mention if guild.rules_channel else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}',
            f'–°–∏—Å—Ç–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª (—á–∞—Ç, –∫—É–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ —Ç–æ–º, —á—Ç–æ –∫—Ç–æ-—Ç–æ –∑–∞—à—ë–ª, –±—É—Å—Ç–∞—Ö –∏ –ø—Ä.): {guild.system_channel.mention if guild.system_channel else "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}',
        )
        other = (
            f'–°—Ç–∏–∫–µ—Ä–æ–≤: **{len(guild.stickers)}**',
            f'–≠–º–æ–¥–∑–∏: **{len(guild.emojis)}**',
            f'–°–ø–ª—ç—à: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' if not guild.splash else f'–°–ø–ª—ç—à: [—Å—Å—ã–ª–∫–∞ –∑–¥–µ—Å—å]({guild.splash})',
            f'–í–ª–∞–¥–µ–ª–µ—Ü: {guild.owner.name}',
            f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: **{guild.max_members}**',
            f'–ê–π–¥–∏ —à–∞—Ä–¥–∞: **{guild.shard_id}**',
        )
        roles = (
            f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π: **{len(guild.roles)}**',
            f'–í–∞—à–∞ –≤—ã—Å—à–∞—è —Ä–æ–ª—å: {inter.author.top_role.mention if inter.author in guild.members else "–í–∞–º –Ω–µ—Ç –Ω–∞ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ("}',
            f'–†–æ–ª—å –±—É—Å—Ç–µ—Ä–æ–≤: {guild.premium_subscriber_role.mention if bool(guild.premium_subscriber_role) else "–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –Ω–µ—Ç —Ä–æ–ª–∏ –±—É—Å—Ç–µ—Ä–æ–≤"}',
        )

        fields = [
            {'name': '> –£—á–∞—Å—Ç–Ω–∏–∫–∏', 'value': '\n'.join(members)},
            {'name': '> –î–∞—Ç—ã', 'value': '\n'.join(dates)},
            {'name': '> –ë—É—Å—Ç—ã', 'value': '\n'.join(boosts)},
            {'name': '> –ö–∞–Ω–∞–ª—ã', 'value': '\n'.join(channels)},
            {'name': '> –†–æ–ª–∏', 'value': '\n'.join(roles)},
            {'name': '> –ü—Ä–æ—á–µ–µ', 'value': '\n'.join(other)},
        ]
        embed = await inter.bot.embeds.simple(
            title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {guild.name}', 
            description='–£ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è :(' if not guild.description else guild.description, 
            fields=fields,
        )

        if guild.icon:
            embed.set_thumbnail(url=guild.icon.url)

        if guild.banner:
            embed.set_image(url=guild.banner.url)

        await inter.send(embed=embed)

    @commands.slash_command(
        description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —é–∑–µ—Ä–µ"
    )
    async def user(self, inter, user: disnake.User = commands.Param(lambda inter: inter.author)):
        statuses = {
            disnake.Status.online: '<:leyla_online:980318029764251679>',
            disnake.Status.dnd: '<:leyla_dnd:980318029860704317>',
            disnake.Status.idle: '<:leyla_idle:980318419859685457>',
            disnake.Status.offline: '<:leyla_offline:980318029877502003>'
        }
        embed = await inter.bot.embeds.simple(title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {"–±–æ—Ç–µ" if user.bot else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"} {user.name}')
        user = await inter.bot.fetch_user(user.id)

        if user.banner:
            embed.set_image(url=user.banner.url)

        embed.set_thumbnail(url=user.display_avatar.url)
        embed.set_footer(text=f"ID: {user.id}")

        main_information = [
            f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: **<t:{round(user.created_at.timestamp())}:R>** | {(datetime.utcnow() - user.created_at.replace(tzinfo=None)).days} –¥–Ω–µ–π",
            f"–ü–æ–ª–Ω—ã–π –Ω–∏–∫–Ω–µ–π–º: **{updated_username(user)}**",
        ]

        embeds = [embed]

        if user in inter.guild.members:
            user_to_member = inter.guild.get_member(user.id)
            bool_to_symbol = {True: '+', False: '-'}

            embed.title = f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {"–±–æ—Ç–µ" if user.bot else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"} {user.name} {"üì±" if user_to_member.is_on_mobile() else "üñ•Ô∏è"}'

            permissions_embed = inter.bot.embed(
                title=f'–ü—Ä–∞–≤–∞ {user_to_member}',
                description='```' + 'diff\n' + '\n'.join([f'{bool_to_symbol[i[-1]]} {i[0].replace("_", " ").capitalize()}' for i in user_to_member.guild_permissions]) + '```'
            ).start()
            embeds.append(permissions_embed)

            spotify = list(filter(lambda x: isinstance(x, disnake.activity.Spotify), user_to_member.activities))
            second_information = [
                f"–ó–∞—à—ë–ª(-–ª–∞) –Ω–∞ —Å–µ—Ä–≤–µ—Ä: **<t:{round(user_to_member.joined_at.timestamp())}:R> | {(datetime.utcnow() - user_to_member.joined_at.replace(tzinfo=None)).days} –¥–Ω–µ–π**",
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–æ–ª–µ–π: **{len(list(filter(lambda role: role, user_to_member.roles)))}**",
                f"–°—Ç–∞—Ç—É—Å: {statuses[user_to_member.status]}"
            ]

            if len(spotify):
                data = spotify[0]
                timestamps = (str(data._timestamps['end'])[:10], str(data._timestamps['start'])[:10])

                embed.add_field(
                    name="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ —Ç—Ä–µ–∫ —Å–ø–æ—Ç–∏—Ñ–∞–π", 
                    value=f"–ü–µ—Å–Ω—è: [{data.title} | {', '.join(data.artists)}]({data.track_url})\n" \
                        f"–ê–ª—å–±–æ–º: [{data.album}]({data.album_cover_url})\n" \
                        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–µ—Å–Ω–∏: {naturaldelta(data.duration.total_seconds())} | <t:{timestamps[0]}:R> - <t:{timestamps[-1]}:R>"
                )

            if len(user_to_member.activities) > 0:
                activities_embed = inter.bot.embed(
                    title=f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {user_to_member}",
                    description='\n'.join([f'{i.name} | <t:{round(i.created_at.timestamp())}:R>' for i in user_to_member.activities])
                ).start()
                embeds.append(activities_embed)

        embed.description = "\n".join(main_information) + "\n" + "\n".join(second_information) if user in inter.guild.members else "\n".join(main_information)
        
        if len(embeds) > 1:
            view = Paginator(embeds, inter.author)
        else:
            view = None

        await inter.send(embed=embeds[0], view=view) if view is not None else await inter.send(embed=embeds[0])


    @commands.slash_command(
        description="–ü–æ–ª—É—á–∏—Ç—å —ç–º–æ–¥–∑–∏–∫"
    )
    async def emoji(self, inter, emoji):
        if emoji in emj.UNICODE_EMOJI_ALIAS_ENGLISH:
            await inter.send(emoji)
        else:
            get_emoji_id = int(''.join(re.findall(r'[0-9]', emoji)))
            url = f"https://cdn.discordapp.com/emojis/{get_emoji_id}.gif?size=480&quality=lossless"
            embed = await inter.bot.embeds.simple(
                title=f"–≠–º–æ–¥–∑–∏ **{emoji}**",
                image=await emoji_converter('webp', url)
            )

            await inter.send(embed=embed)

    @commands.slash_command(description="–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –ø–æ–¥–Ω—è—Ç—å —Å–µ—Ä–≤–µ—Ä –≤ —Ç–æ–ø–µ –Ω–∞ boticord'e")
    async def up(self, inter: disnake.ApplicationCommandInteraction):
        data = {
            "serverID": str(inter.guild.id),
            "up": 1,
            "status": 1,
            "serverName": inter.guild.name,
            "serverAvatar": inter.guild.icon.url if inter.guild.icon else None,
            "serverMembersAllCount": len(inter.guild.members),
            "serverMembersOnlineCount": len(list(filter(lambda x: not x.status == disnake.Status.offline, inter.guild.members))),
            "serverOwnerID": str(inter.guild.owner_id),
            "serverOwnerTag": str(inter.guild.owner),
            "upUserId": str(inter.author.id),
            "upChannelID": str(inter.channel.id),
            "upChannelName": inter.channel.name
        }

        async with inter.bot.session.post(
            'https://api.boticord.top/v2/server',
            headers={'Authorization': 'Bot ' + environ['BCORD']},
            json=data
        ) as response:
            data = await response.json()
            embed = await inter.bot.embeds.simple(
                title='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ BotiCord!',
                description="–£ –º–µ–Ω—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ API –º–µ—Ç–æ–¥—É(\n–ó–∞–π–¥–∏—Ç–µ –Ω–∞ [—Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏](https://discord.gg/43zapTjgvm) –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –ø–æ–º–æ—â–∏" if "error" in data else data["message"],
                url=f"https://boticord.top/add/server" if "error" in data else f"https://boticord.top/server/{inter.guild.id}"
            )

            await inter.send(
                '–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å–µ—Ä–≤–µ—Ä–∞! <3' if '—É—Å–ø–µ—à–Ω–æ' in data['message'] else None,
                embed=embed
            )

    @commands.is_nsfw()
    @commands.slash_command(name='emoji-random', description="–Ø –Ω–∞–π–¥—É —Ç–µ–±–µ —Ä–∞–Ω–¥–æ–º–Ω—ã–π —ç–º–æ–¥–∑–∏–∫ :3")
    async def random_emoji(self, inter):
        emoji = random.choice(inter.bot.emojis)
        await inter.send(embed=await inter.bot.embeds.simple(description="–≠–º–æ–¥–∑—è—è—è—è—è—è—è—è", image=emoji.url, fields=[
            {'name': '–°–∫–∞—á–∞—Ç—å —ç–º–æ–¥–∑–∏–∫', 'value': f'[–¢–´–ö–¢–´–ö–¢–´–ö]({emoji.url})'}]))

    @commands.slash_command(
        name="random-anime",
        description="–í—ã –∂–µ –ª—é–±–∏—Ç–µ –∞–Ω–∏–º–µ? –Ø –¥–∞, –∞ –≤–æ—Ç —Ç—É—Ç —è –º–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –≤–∞–º –∞–Ω–∏–º–µ!",
        guild_ids=[864367089102749726]
    )
    async def random_anime(self, inter):
        url = 'https://animego.org'

        async with aiohttp.ClientSession(
                headers={
                    'accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
                    'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 OPR/80.0.4170.91',
                    'cookie': environ['COOKIE']
                }) as session:
            async with session.get(f'{url}/anime/random') as res:
                soup = BeautifulSoup(await res.text(), 'html.parser')
                name = soup.select('.anime-title')[0].find('h1', class_=False).text
                img = soup.find('div', class_='anime-poster').find('img', class_=False).get('src')
                desc = soup.find('div', class_='description').text
                url = f'{url}{res.url._val.path}'
                await session.close()
        desc = re.sub('\n', '', desc, 1)
        await inter.send(
            embed=await inter.bot.embeds.simple(
                description=f'**[{name}]({url})**\n**–û–ø–∏—Å–∞–Ω–∏–µ**\n> {desc}',
                thumbnail=re.sub('media/cache/thumbs_\d{3}x\d{3}', '', img)
            )
        )

    @commands.slash_command(name="currency", description="–ü–æ–¥—Å–∫–∞–∂—É –≤–∞–º –∫—É—Ä—Å —Ç–æ–π –∏–ª–∏ –∏–Ω–æ–π –≤–∞–ª—é—Ç—ã :) (–í —Ä—É–±–ª—è—Ö!)")
    async def currency_converter(self, inter, currency, how_many: float = 0):
        async with inter.bot.session.get('https://www.cbr-xml-daily.ru/daily_json.js') as response:
            cb_data = await response.text()

        json_cb_data = json.loads(cb_data)
        get_currency = {i: j['Name'] for i, j in json_cb_data['Valute'].items()}
        data = json_cb_data["Valute"]
        view = CurrencyButton()

        if currency.upper() in data:
            upper_currency = currency.upper()

            await inter.send(
                embed=await inter.bot.embeds.simple(
                    title=f'–ö—É—Ä—Å - {get_currency[upper_currency]} ({upper_currency})',
                    description=f'–û–¥–∏–Ω {get_currency[upper_currency]} –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å—Ç–æ–∏—Ç **{round(data[upper_currency]["Value"], 2) / data[upper_currency]["Nominal"]}** —Ä—É–±–ª–µ–π. ({round(data[upper_currency]["Value"] - data[upper_currency]["Previous"], 1)})',
                    fields=[
                        {
                            "name": "–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å",
                            "value": abs(data[upper_currency]["Value"] - round(data[upper_currency]["Value"])),
                            'inline': True
                        },
                        {
                            "name": "–ü—Ä–æ—à–ª–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å",
                            "value": data[upper_currency]['Previous'] / data[upper_currency]['Nominal'],
                            'inline': True
                        }, None if how_many == 0 else {
                            "name": f"–°–∫–æ–ª—å–∫–æ **{how_many} {upper_currency}** –≤ —Ä—É–±–ª—è—Ö",
                            "value": round(how_many * (data[upper_currency]['Value'] / data[upper_currency]['Nominal']),
                                           2),
                        },
                    ],
                    footer={"text": '–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–∑—è—Ç–∞ —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–≥–æ API –¶–ë –†–§.',
                            'icon_url': 'https://cdn.discordapp.com/attachments/894108349367484446/951452412714045460/unknown.png?width=493&height=491'}
                ), view=view
            )
        else:
            await inter.send(
                embed=await inter.bot.embeds.simple(
                    title='–ö—É—Ä—Å... –¢–∞–∫, —Å—Ç–æ–ø',
                    description="–¢–∞–∫–æ–π –≤–∞–ª—é—Ç—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ª—é–±—É—é –∏–∑ –≤–∞–ª—é—Ç (–ö–Ω–æ–ø–∫–∞ –Ω–∏–∂–µ)"
                ), view=view
            )

    @commands.slash_command(description="–ü–µ—Ä–µ–≤–µ–¥—É —Ç–µ–±–µ –≤—Å—ë, —á—Ç–æ –º–æ–∂–Ω–æ!")
    async def translate(self, inter, text, to_language, from_language='auto'):
        google = GoogleTranslator()
        data = await google.translate_async(text, to_language, from_language)

        await inter.send(
            embed=await inter.bot.embeds.simple(
                title='–õ–µ–π–ª–∞-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫',
                description=data,
                fields=[{"name": "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç", "value": text}],
                footer={
                    "text": f'–ü–µ—Ä–µ–≤–æ–¥–µ–Ω–æ —Å {from_language} –Ω–∞ {to_language}',
                    'icon_url': 'https://upload.wikimedia.org/wikipedia/commons/thumb/d/d7/Google_Translate_logo.svg/1200px-Google_Translate_logo.svg.png'
                }
            )
        )

    @commands.slash_command(description="–ü–æ–º–æ–≥—É —Ä–µ—à–∏—Ç—å –ø–æ—á—Ç–∏ –ª—é–±–æ–π –ø—Ä–∏–º–µ—Ä!")
    async def calculator(self, inter, expression: str):
        async with inter.bot.session.get(f'http://api.mathjs.org/v4/?expr={quote(expression)}') as response:
            data = await response.text()

        await inter.send(
            embed=await inter.bot.embeds.simple(
                title='–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä',
                fields=[{"name": "–í–≤–µ–¥—ë–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä", "value": expression, 'inline': True},
                        {'name': "–†–µ–∑—É–ª—å—Ç–∞—Ç", "value": data, 'inline': True}]
            )
        )

    @commands.slash_command(name="bcinfo", description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ —Å BotiCord")
    async def boticord_info_cmd(self, inter):
        ...

    @boticord_info_cmd.sub_command(name='server', description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–µ—Ä–µ —Å BotiCord'a!")
    async def boticord_server_info(self, inter, guild=None):
        async with inter.bot.session.get(
                f'https://api.boticord.top/v1/server/{inter.bot.get_guild(guild).id if inter.bot.get_guild(guild) in inter.bot.guilds else inter.guild.id if guild is None else guild}') as response:
            request = await response.json()

        if 'information' in request.keys():
            links_array = [
                f"–ò–Ω–≤–∞–π—Ç: {request['information']['links']['invite']}" if request['information']['links'][
                    'invite'] else None,
                f"–¢–≤–∏—á: {request['information']['links']['twitch']}" if request['information']['links'][
                    'twitch'] else None,
                f"–°—Ç–∏–º: {request['information']['links']['steam']}" if request['information']['links'][
                    'steam'] else None,
                f"–í–ö: {request['information']['links']['vk']}" if request['information']['links']['vk'] else None,
                f"–°–∞–π—Ç: {request['information']['links']['site']}" if request['information']['links']['site'] else None,
                f"–Æ—Ç—É–±: {request['information']['links']['youtube']}" if request['information']['links'][
                    'youtube'] else None,
            ]
            md = cld.monthrange(datetime.now().year, datetime.now().month)[-1]
            embed = await inter.bot.embeds.simple(
                title=request['information']['name'],
                description=f'**–í–ª–∞–¥–µ–ª–µ—Ü:** {guild.owner.name if guild else inter.guild.owner.name}\n' +
                            BeautifulSoup(request['information']['longDescription'], 'lxml').text if guild in inter.bot.guilds else '' + BeautifulSoup(request[
                    'information']['longDescription']).text,
                url=f"https://boticord.top/server/{inter.bot.get_guild(guild).id if inter.bot.get_guild(guild) in inter.bot.guilds else inter.guild.id if guild is None else guild}",
                footer={"text": request['information']['shortDescription'],
                        'icon_url': inter.author.display_avatar.url},
                fields=[
                    {
                        "name": f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∞–º–ø–æ–≤ (–æ—Ü–µ–Ω–æ–∫) | –î–æ —Å–±—Ä–æ—Å–∞ (–¥–Ω–µ–π)",
                        "value": str(request['information']['bumps']) + " | " + str(md - datetime.now().day),
                        "inline": True
                    },
                    {
                        "name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤",
                        "value": request['information']['members'][0],
                        "inline": True
                    },
                    {
                        "name": "–¢—ç–≥–∏",
                        "value": ', '.join(request['information']['tags']) if len(
                            request['information']['tags']) > 0 else "–£ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç —Ç—ç–≥–æ–≤.",
                        "inline": True
                    },
                    {
                        "name": "–ü—Ä–æ—á–∏–µ —Å—Å—ã–ª–∫–∏",
                        "value": "\n".join([i for i in links_array if not i is None]),
                        "inline": True
                    }
                ],
            )

            if request['shortCode']:
                embed.add_field(name="–ö–æ—Ä–æ—Ç–∫–∞—è —Å—Å—ã–ª–∫–∞", value=f'https://bcord.cc/s/{request["shortCode"]}', inline=True)

            if request['information']['avatar']:
                embed.set_thumbnail(url=request['information']['avatar'])
        else:
            raise CustomError("–°–µ—Ä–≤–µ—Ä–∞ –Ω–µ—Ç –Ω–∞ –±–æ—Ç–∏–∫–æ—Ä–¥ (–∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –∫–∞–∫–∞—è-–ª–∏–±–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞).")

        await inter.send(embed=embed)

    @boticord_info_cmd.sub_command(name='bot', description="–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ —Å BotiCord'a!")
    async def boticord_bot_info(self, inter, bot=None):
        async with inter.bot.session.get(f'https://api.boticord.top/v1/bot/{bot}') as response:
            request = await response.json()

        if 'information' in request:
            fetch_developers = [await inter.bot.fetch_user(i) for i in request["information"]["developers"]]
            fields = [
                {
                    "name": "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "value": f'–°–µ—Ä–≤–µ—Ä–æ–≤: {request["information"]["stats"]["servers"]}\n' + \
                                                   f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {request["information"]["stats"]["users"]}\n' + \
                                                   f'–®–∞—Ä–¥–æ–≤: {request["information"]["stats"]["shards"]}\n', "inline": True
                }, 
                {"name": "–¢—ç–≥–∏", "value": ', '.join(request['information']['tags']), "inline": True},
                {
                    "name": "BCord —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "value": f'–û—Ü–µ–Ω–æ–∫: {request["information"]["bumps"]}\n' + \
                                                         f'–î–æ–±–∞–≤–ª–µ–Ω —Ä–∞–∑: {request["information"]["added"]}\n' + \
                                                         f'–ü—Ä–µ—Ñ–∏–∫—Å: {request["information"]["prefix"]}\n', "inline": True
                },
                {"name": "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏", "value": f'–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏: {", ".join([str(i) for i in fetch_developers])}\n', "inline": True}
            ]

            embed = await inter.bot.embeds.simple(
                title=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {bot}', 
                description=BeautifulSoup(request['information']['longDescription'], 'lxml').text, 
                footer={'text': request['information']['shortDescription'], 'icon_url': inter.author.display_avatar.url},
                fields=fields
            )
            await inter.send(embed=embed)
        else:
            raise CustomError("–Ø –Ω–µ –Ω–∞—à–ª–∞ –Ω–∏—á–µ–≥–æ –ø–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É!")

    async def giveaway_check(self, interaction, time):
        await asyncio.sleep(time)

        async for i in interaction.bot.config.DB.giveaway.find({"time": {"$lte": datetime.now()}}):
            if interaction.bot.get_guild(i['guild']) in interaction.bot.guilds:
                message = await interaction.bot.get_channel(i['channel']).fetch_message(i['message_id'])
                embed = await interaction.bot.embeds.simple(
                    title='> –†–æ–∑—ã–≥—Ä—ã—à –æ–∫–æ–Ω—á–µ–Ω!', 
                    description=f"**–ü—Ä–∏–∑:** {i['prize']}\n**–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:** {''.join(random.choices([i.mention async for i in message.reactions[0].users()], k=i['count']))}",
                )
                await message.edit(embed=embed)
        
            await interaction.bot.config.DB.giveaway.delete_one({"guild": i['guild'], 'prize': i['prize']})


    @commands.slash_command(name="giveaway", description="–ú–æ–∂–Ω–æ –≤—Å—è–∫–∏–µ —Ç–∞–º —Ä–æ–∑—ã–≥—Ä—ã—à–∏ –¥–µ–ª–∞—Ç—Ü...")
    @commands.has_permissions(manage_roles=True)
    async def utilities_giveaway(
        self, inter,
        giveaway_channel: disnake.TextChannel, prize: str,
        time: int, unit: Literal['–°–µ–∫—É–Ω–¥', '–ú–∏–Ω—É—Ç', '–ß–∞—Å–æ–≤', '–î–Ω–µ–π'], prizes_count: int = 1
    ):
        if time <= 0:
            raise CustomError("–≠! –ù–∏–∂–µ –Ω—É–ª—è –Ω–µ–ª—å–∑—è! –í—Ä–µ–º—è —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ \ü•∫")
        else:
            time_convert = {
                '–°–µ–∫—É–Ω–¥': datetime.now() + timedelta(seconds=time),
                '–ú–∏–Ω—É—Ç': datetime.now() + timedelta(minutes=time),
                '–ß–∞—Å–æ–≤': datetime.now() + timedelta(hours=time),
                '–î–Ω–µ–π': datetime.now() + timedelta(days=time),
            }

            embed = await inter.bot.embeds.simple(
                title='> –†–æ–∑—ã–≥—Ä—ã—à!',
                description=f"**–ü—Ä–∏–∑:** {prize}",
                footer={"text": f'–î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {time} {unit.lower()}', 'icon_url': inter.author.display_avatar.url}
            )
            message = await giveaway_channel.send(embed=embed)
            await message.add_reaction('üëç')
            await inter.bot.config.DB.giveaway.insert_one(
                {"guild": inter.guild.id, "count": prizes_count, "prize": prize, "time": time_convert[unit],
                 "channel": giveaway_channel.id,
                 "message_id": message.id}
            )
            asyncio.create_task(self.giveaway_check(inter, time_convert[unit]))

    @commands.slash_command(name='role-info', description="–í—ã–¥–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–π —Ä–æ–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    async def utilities_role_info(self, inter, role: disnake.Role):
        role_info_array = [
            f'–¶–≤–µ—Ç —Ä–æ–ª–∏: **{hex(role.color.value)}**',
            f'–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: **{"–î–∞" if role.is_integration() else "–ù–µ—Ç"}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —ç—Ç–æ–π —Ä–æ–ª–∏: **{len(role.members)}**',
            f'ID —Ä–æ–ª–∏: **{role.id}**',
            f'–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–æ–ª–∏: {role.mention}',
            f'–ü–æ–∑–∏—Ü–∏—è: **{role.position}**',
            f'–†–æ–ª—å —Å–æ–∑–¥–∞–Ω–∞: <t:{round(role.created_at.timestamp())}:D>'
        ]
        embed = await inter.bot.embeds.simple(
            title=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {role.name}",
            description='\n'.join(role_info_array),
        )

        if role.icon:
            embed.set_thumbnail(url=role.icon.url)

        await inter.send(embed=embed)

    @commands.slash_command(
        name='wikipedia',
        description="–ù–∞–π–¥—ë—Ç—Å—è –≤—Å—ë!"
    )
    async def utilities_wiki(self, inter, query: str) -> str:
        wikipedia.set_lang(prefix='ru')
        wiki_view = disnake.ui.View()

        if len(wikipedia.search(query)):
            wiki_view.add_item(
                WikiDropdown(
                    wiki_options=[SelectOption(label=i) for i in wikipedia.search(query)],
                    bot=inter.bot,
                    author=inter.author
                )
            )
        else:
            wiki_view.add_item(disnake.ui.Button(label='–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(', disabled=True))

        await inter.send(view=wiki_view)


    @commands.slash_command(
        name="reminder",
        description='–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞'
    )
    async def utilities_reminder(self, inter):
        ...

    async def reminder_task(self, inter):
        await asyncio.sleep(1)
        db = inter.bot.config.DB.reminder
        reminders = db.find({'time': {'$lte': datetime.now()}})

        async for reminder in reminders:
            ids = reminder['member']
            member = await inter.bot.fetch_user(ids)
            channel = await inter.bot.fetch_channel(reminder['channel'])
            embed = await inter.bot.embeds.simple(
                title='–í—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏?',
                description='–í—ã –ø—Ä–æ—Å–∏–ª–∏ –º–µ–Ω—è, –Ω–∞–ø–æ–º–Ω–∏—Ç—å –í–∞—Å –æ —á—ë–º-—Ç–æ –≤–∞–∂–Ω–æ–º, –Ω–∞–≤–µ—Ä–Ω–æ–µ',
                fields=[{'name': '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', 'value': reminder['text'] if len(reminder['text']) < 1024 else reminder['text'][:1023]+'...'}]
            )

            await channel.send(content=member.mention, embed=embed)
            return await db.delete_one(reminder)

    @utilities_reminder.sub_command(
        name="set",
        description='–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è',
    )
    async def reminder_set(self, inter, text: str, duration: int, unit: Literal['–°–µ–∫—É–Ω–¥', '–ú–∏–Ω—É—Ç', '–ß–∞—Å–æ–≤', '–î–Ω–µ–π']):
        time_convert = {
            '–°–µ–∫—É–Ω–¥': datetime.now() + timedelta(seconds=duration),
            '–ú–∏–Ω—É—Ç': datetime.now() + timedelta(minutes=duration),
            '–ß–∞—Å–æ–≤': datetime.now() + timedelta(hours=duration),
            '–î–Ω–µ–π': datetime.now() + timedelta(days=duration)
        }
        db = inter.bot.config.DB.reminder

        if not re.match(r'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)', text):
            if duration <= 0:
                raise CustomError("–≠! –ù–∏–∂–µ –Ω—É–ª—è –Ω–µ–ª—å–∑—è! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é \ü•∫")
            else:
                await db.insert_one({"guild": inter.guild.id, "member": inter.author.id, "text": text, 'time': time_convert[unit], 'channel': inter.channel.id})
                await inter.send(
                    embed=await inter.bot.embeds.simple(
                        title="–ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!",
                        fields=[
                            {'name': '–°–æ–æ–±—â–µ–Ω–∏–µ', 'value': text[:1023]},
                            {'name': '–í—Ä–µ–º—è', 'value': f'{duration} {unit.lower()}'}
                        ]
                    )
                )
                await asyncio.create_task(self.reminder_task())
        else:
            await inter.send('–ù–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏, —É–≤—ã :(')
    
    @commands.slash_command(
        name="invites",
        description="–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"
    )
    async def invites_top_info(self, inter):
        data = enumerate(sorted([(i.uses, str(i.inviter), i.url) for i in await inter.guild.invites()], key=lambda x: x[0], reverse=True))
        invite_data = list(data)
        yield_invite_data = lambda _: (f'{i[0]+1}. "{i[-1][-1].split("/")[-1]}" -> {i[1][0]} | {i[1][1]}' for i in invite_data if i[0]+1 <= 15)

        await inter.send(
            embed=inter.bot.embed(
                title="–¢–æ–ø —Ç–µ—Ö, –∫—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–ª", 
                description='```py\n' + '\n'.join(list(yield_invite_data(invite_data))) + '```'
            ).start()
        )


def setup(bot: commands.Bot):
    bot.add_cog(Utilities(bot))
