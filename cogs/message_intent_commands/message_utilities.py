import platform
import sys
import asyncio
import re
import random
from datetime import datetime
from contextlib import suppress

import disnake
import psutil
from disnake.ext import commands

from core.classes.another_embeds import Field, Footer
from Tools.update_changer import updated_username


class ProfileMenu(disnake.ui.Select):
    def __init__(self, user):
        self.user = user
        super().__init__(
            placeholder="–í—ã–±—Ä–∞—Ç—å –ø–æ–ª",
            custom_id='gender',
            min_values=1,
            max_values=1,
            options=[
                disnake.SelectOption(label='–ú—É–∂—Å–∫–æ–π'),
                disnake.SelectOption(label='–ñ–µ–Ω—Å–∫–∏–π')
            ]
        )

    async def callback(self, inter):
        ru_to_eng = {
            '–ú—É–∂—Å–∫–æ–π': "male",
            '–ñ–µ–Ω—Å–∫–∏–π': "female"
        }

        db = inter.bot.config.DB.gender
        
        if self.user.id == inter.author.id:
            if await db.count_documents({"_id": inter.author.id}) > 0:
                await db.update_one({"_id": inter.author.id}, {"$set": {"gender": ru_to_eng[self.values[0]]}})
            else:
                await db.insert_one({"_id": inter.author.id, "gender": ru_to_eng[self.values[0]]})

            await inter.send('–ü–æ–ª –±—ã–ª —É–∫–∞–∑–∞–Ω.', ephemeral=True)
        else:
            await inter.send('–ù–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –ø–æ–º–µ–Ω—è—Ç—å –ø–æ–ª –¥—Ä—É–≥–∏–º', ephemeral=True)


class MessageUtilities(commands.Cog, name='—É—Ç–∏–ª–∏—Ç—ã', description="–í—Å—è–∫–∏–µ –Ω–µ–Ω—É–∂–Ω—ã–µ, –∞ –º–æ–∂–µ—Ç –±—ã—Ç—å, –∏, –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"): # type: ignore

    def __init__(self, bot):
        self.bot = bot

    COG_EMOJI = 'üîß'

    async def message_reference_author(self, ctx, message_id: int):
        data = await ctx.channel.fetch_message(message_id)
        return data.author


    @commands.command(name="afk", description="–í—Å—Ç–∞–ª–∏ –≤ –∞—Ñ–∫? –ù—É –ª–∞–¥–Ω–æ, –ø–æ–¥–æ–∂–¥—ë–º.", usage='afk [–ü—Ä–∏—á–∏–Ω–∞]')
    async def message_utilities_afk_command(self, inter, *, reason: str = None):
        if await self.bot.config.DB.afk.count_documents({"guild": inter.guild.id, "member": inter.author.id}) == 0:
            await self.bot.config.DB.afk.insert_one({"guild": inter.guild.id, "member": inter.author.id,
                                                     "reason": reason if reason else "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã",
                                                     "time": datetime.now()})

        await inter.send(
            embed=await self.bot.embeds.simple(
                description=f"–Ø –ø–æ—Å—Ç–∞–≤–∏–ª–∞ –≤–∞—Å –≤ —Å–ø–∏—Å–æ–∫ AFK, –∂–¥—ë–º –≤–∞—à–µ–≥–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è :relaxed:\n–ü—Ä–∏—á–∏–Ω–∞: {reason if reason else '–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã'}"
            )
        )

    @commands.command(name="stats", description="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞")
    async def message_utilities_stats(self, ctx):
        shard_names = {
            '0': '–°—Ç–µ–ª–ª–∞',
            '1': '–ö—Ä–∏—Å—Ç–∏–Ω–∞',
            '2': '–í–∏–∫—Ç–æ—Ä–∏—è',
            '3': '–ö–ª—ç—Ä'
        }
        guilds_info = (
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: **{len(self.bot.guilds)}**",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: **{len(self.bot.users)}**",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∏–∫–µ—Ä–æ–≤: **{len(self.bot.stickers)}**",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏: **{len(self.bot.emojis)}**",
        )
        about_me_info = (
            f"–Ø —Å–æ–∑–¥–∞–Ω–∞: **13 –∏—é–ª—è, 2021 –≥–æ–¥–∞.**",
            f"[–ú–æ–π —Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏](https://discord.gg/43zapTjgvm)",
            f"–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞: **{platform.platform()}**",
            f"–Ø–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: **Python {platform.python_version()}**"
        )
        other_info = (
            f"–ú–æ–π ID: **{ctx.me.id}**",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—ç—à –∫–æ–º–∞–Ω–¥: **{len(self.bot.global_slash_commands)}**",
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥: **{len([i for i in self.bot.commands if not i.name == 'jishaku' and not i.name == 'justify'])}**",
            f"–ó–∞–¥–µ—Ä–∂–∫–∞: **{round(self.bot.latency*1000, 2)}ms**",
            f"RAM: **{psutil.virtual_memory().percent}%**",
            f"CPU: **{psutil.Process().cpu_percent()}%**",
            f"–ö–ª–∞—Å—Ç–µ—Ä–æ–≤: **{len(self.bot.shards)}**",
        )
        embed = await self.bot.embeds.simple(
            title=f"–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ | –ö–ª–∞—Å—Ç–µ—Ä —Å–µ—Ä–≤–µ—Ä–∞: {shard_names[str(ctx.guild.shard_id)]}",
            description=f"–í—Ä–µ–º—è, —Å–∫–æ–ª—å–∫–æ —è —Ä–∞–±–æ—Ç–∞—é - <t:{round(self.bot.uptime.timestamp())}:R> - ||—Å–ø–∞—Å–∏—Ç–µ... ***–º–æ—Ä–≥–Ω—É–ª–∞ 3 —Ä–∞–∑–∞***||",
            url="https://leylabot.ml/",
            fields=[
                {"name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–∞—Ö", "value": '\n'.join(guilds_info), "inline": True},
                {"name": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ –º–µ–Ω—è", "value": '\n'.join(about_me_info), "inline": True},
                {"name": "–í—Å—ë –ø—Ä–æ—á–µ–µ", "value": '\n'.join(other_info), "inline": True}
            ],
            footer={"text": f"–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å: {', '.join([updated_username(self.bot.get_user(i)) for i in self.bot.owner_ids])}", "icon_url": ctx.me.avatar.url}
        )

        await ctx.reply(embed=embed)

    @commands.command(name="profile", description="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å –≤–æ –º–Ω–µ, –∫–∞–∫ –±—ã —Å—Ç—Ä–∞–Ω–Ω–æ —ç—Ç–æ –Ω–µ –∑–≤—É—á–∞–ª–æ", usage="profile <–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>")
    async def message_utilities_profile(self, ctx, _user: disnake.User = None):
        user = _user if _user else await self.message_reference_author(ctx, ctx.message.reference.message_id if ctx.message.reference else ctx.message.id)

        if ctx.author.id == user.id:
            view = disnake.ui.View()

            view.add_item(disnake.ui.Button(label='–£–∫–∞–∑–∞—Ç—å –±–∏–æ–≥—Ä–∞—Ñ–∏—é', style=disnake.ButtonStyle.blurple, custom_id='bio_btn'))
            view.add_item(disnake.ui.Button(label='–£–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç', style=disnake.ButtonStyle.blurple, custom_id='age_btn'))
            view.add_item(ProfileMenu(user=user))

        warns_count = await self.bot.config.DB.warns.count_documents({"member": user.id})
        warns_guild_count = await self.bot.config.DB.warns.count_documents({"guild": ctx.guild.id, "member": user.id})

        gender = {
            'male': "–ú—É–∂—Å–∫–æ–π",
            'female': "–ñ–µ–Ω—Å–∫–∏–π"
        }
        gender_db = self.bot.config.DB.gender

        if await gender_db.count_documents({'_id': user.id}) > 0:
            get_gender = gender[dict(await gender_db.find_one({"_id": user.id}))['gender']]
        else:
            get_gender = '–ù–µ —É–∫–∞–∑–∞–Ω'

        if await self.bot.config.DB.marries.count_documents({'$or': [{'_id': user.id}, {'mate': user.id}]}) > 0:
            data = await self.bot.config.DB.marries.find_one({'$or': [{'_id': user.id}, {'mate': user.id}]})
            key = {v:k for k, v in data.items()}[user.id]
            married_user = await self.bot.fetch_user(int(data['_id'] if key == 'mate' else data['mate']))
            marry_data = updated_username(married_user)
        else:
            marry_data = '–ù–µ—Ç –ø–∞—Ä—ã'

        if await self.bot.config.DB.badges.count_documents({"_id": user.id}) > 0:
            badge_data = ' '.join(dict(await self.bot.config.DB.badges.find_one({"_id": user.id}))['badges'])
        else:
            badge_data = '–ó–Ω–∞—á–∫–æ–≤ –Ω–µ—Ç'
        
        level_data = await self.bot.config.DB.levels.find_one({"guild": ctx.guild.id, "member": user.id})

        if await self.bot.config.DB.levels.find_one({"_id": ctx.guild.id}):
            if user.bot:
                levels = '–£ –±–æ—Ç–æ–≤ –Ω–µ—Ç —Ä–∞–Ω–≥–æ–≤('
            else:
                levels = f'LVL: {level_data["lvl"]}\nXP: {level_data["xp"]} / {5*(level_data["lvl"]**2)+50*level_data["lvl"]+100}'
        else:
            levels = '–í—ã–∫–ª—é—á–µ–Ω–æ'

        bio_and_age = lambda x: self.bot.config.DB.get_collection(x)

        if await bio_and_age('bio').count_documents({"guild": ctx.guild.id, "member": user.id}) > 0:
            data = await bio_and_age('bio').find_one({"guild": ctx.guild.id, "member": user.id})
            bio = data['bio']
        else:
            bio = '–ë–∏–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω–∞'

        if await bio_and_age('age').count_documents({"_id": user.id}) > 0:
            data = await bio_and_age('age').find_one({"_id": user.id})

            age = data['age']
        else:
            age = '–í–æ–∑—Ä–∞—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω'

        embed = self.bot.embed(
            title=f'–ü—Ä–æ—Ñ–∏–ª—å {user.name}',
            description=bio,
            thumbnail=user.display_avatar.url,
            footer=Footer(
                text='–í—Å—ë –∑–∞—â–∏—â–µ–Ω–æ, –ø—Ä–∞–≤–¥–∞-–ø—Ä–∞–≤–¥–∞!', 
                icon_url=self.bot.user.avatar.url
            )
        )

        embed.field(name='–£—Ä–æ–≤–Ω–∏', value=levels, inline=True)
        embed.field(name='–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', value=f'–°–µ—Ä–≤–µ—Ä: {warns_guild_count} | –ì–ª–æ–±–∞–ª—å–Ω–æ: {warns_count}', inline=True)
        embed.field(name='–°—Ç–∞—Ç—É—Å –≤ –±–æ—Ç–µ', value='–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫' if user.id in self.bot.owner_ids else '–≠—Ç–æ —è! <:AVAVVAVA:919119257063792670>' if user.id == self.bot.user.id else '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', inline=True)
        embed.field(name='–í—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∫–∞', value=str(marry_data), inline=True)
        embed.field(name='–ü–æ–ª', value=get_gender, inline=True)
        embed.field(name='–í–æ–∑—Ä–∞—Å—Ç', value=age, inline=True)

        if badge_data != '–ó–Ω–∞—á–∫–æ–≤ –Ω–µ—Ç':
            embed.field(name='–ó–Ω–∞—á–∫–∏', value=badge_data, inline=True)
        
        if ctx.author.id == user.id:
            message = await ctx.send(
                embed=embed.start(),
                view=view
            )

            await asyncio.sleep(60) # timeout –æ—Ç View –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç(

            view.children[0].disabled = True # type: ignore
            view.children[1].disabled = True # type: ignore
            view.children[2].disabled = True # type: ignore

            await message.edit(view=view)
        else:
            await ctx.send(embed=embed.start())
        

    @commands.Cog.listener()
    async def on_button_click(self, inter):
        bio_and_age = lambda x: self.bot.config.DB.get_collection(x)

        if inter.component.custom_id == 'bio_btn':
            await inter.send('–ù–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à—É –∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é! –£ –≤–∞—Å –µ—Å—Ç—å 10 –º–∏–Ω—É—Ç')

            with suppress(asyncio.TimeoutError):
                msg = await self.bot.wait_for('message', check=lambda x: x.author.id == inter.author.id and x.channel.id == inter.channel.id, timeout=600)

                if len(msg.content) > 2048:
                    await inter.send('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è –±–∏–æ–≥—Ä–∞—Ñ–∏—è, –ø–æ–ø—Ä–æ–±—É–π –º–µ–Ω—å—à–µ **2048** —Å–∏–º–≤–æ–ª–æ–≤!')
                else:
                    if await bio_and_age('bio').count_documents({"guild": inter.guild.id, "member": inter.author.id}) == 0:
                        await self.bot.config.DB.bio.insert_one({"guild": inter.guild.id, "member": inter.author.id, "bio": msg.content})
                    else:
                        await self.bot.config.DB.bio.update_one({"guild": inter.guild.id, "member": inter.author.id}, {"$set": {"bio": msg.content}})

                    await msg.add_reaction('‚úÖ')

        if inter.component.custom_id == 'age_btn':
            await inter.send('–í–≤–µ–¥–∏—Ç–µ –≤ —á–∞—Ç –í–∞—à –≤–æ–∑—Ä–∞—Å—Ç. –£ –≤–∞—Å –º–∏–Ω—É—Ç–∞')

            with suppress((ValueError, asyncio.TimeoutError)):
                age_msg = await self.bot.wait_for('message', check=lambda x: x.author.id == inter.author.id and isinstance(int(x.content), int), timeout=60)
                
                if int(age_msg.content) < 13:
                    await inter.send('–í —Å–º—ã—Å–ª–µ —Ç—ã –º–ª–∞–¥—à–µ 13? –ß—Ç–æ —Ç—ã —Ç—É—Ç –¥–µ–ª–∞–µ—à—å?')
                elif int(age_msg.content) >= 120:
                    await inter.send('–¢–∏–≤–æ-—Ç–∏–≤–æ? –°–∫–æ–ª—å–∫–æ-—Å–∫–æ–ª—å–∫–æ –ª–µ—Ç?')
                else:
                    if await bio_and_age('age').count_documents({"_id": inter.author.id}) == 0:
                        await self.bot.config.DB.age.insert_one({"_id": inter.author.id, "age": age_msg.content})
                    else:
                        await self.bot.config.DB.age.update_one({"_id": inter.author.id}, {"$set": {"age": age_msg.content}})
                        
                    await age_msg.add_reaction('‚úÖ')
        
    @commands.command(name='joke', description='–ù–µ —Å–º–µ—à–Ω–æ. –ù–µ —Å–º–µ—ë–º—Å—è')
    async def message_utilities_joke(self, ctx):
        response = await self.bot.session.get(f'https://millionstatusov.ru/umor/page-{random.randint(1, 523)}.html')
        data = await response.read()

        data = data.decode('utf-8')
        quote = random.choice([i.strip() for i in re.findall(r'(?s)class="(?:t0|cont_text)">(.*?)<', data)])

        await ctx.reply(quote)

    @commands.command(
        name="idea", 
        description="–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–¥—ë—Ç –Ω–∞ [—Å–µ—Ä–≤–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏](https://discord.gg/43zapTjgvm)",
        usage="idea <–°–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ>"
    )
    async def message_utilities_idea(self, ctx, *, text: str):
        channel = self.bot.get_channel(864408517237800980)
        message = await channel.send(f'–ü—Ä–∏—à–ª–∞ –Ω–æ–≤–∞—è –∏–¥–µ—è –æ—Ç: **{ctx.author.name}**\n–° —Å–µ—Ä–≤–µ—Ä–∞: **{ctx.guild.name}**\n\n–°–∞–º–∞ –∏–¥–µ—è: {text}')
        await message.add_reaction('üëç')
        await message.add_reaction('üëé')


def setup(bot):
    bot.add_cog(MessageUtilities(bot))
